{"name":"Congress Call Campaigns","tagline":"Web App to enable easy click-to-call to your member of Congress","body":"### About this project\r\nWhen it comes to getting your voice heard by Congress, it is often said that an in-person visit to your member of Congress, is as influential as 10 calls to their office, or 100 written letters, or 1,000 emails.  \r\n\r\nWhile visiting your elected officials is not always feasible, picking up the phone and giving them a call is very easy to do.  However, many people resort to emails, or even worse, doing nothing despite deeply caring about an issue.\r\n\r\nThis project makes is easy for an advocacy organization to quickly and easily launch a call campaign among a large member base on a specific set of designated issues.  Using this app, you can enable your audience to easily identify their member of the House or Senate, and be connected with them via phone by them simply clicking a button in their web browser.\r\n\r\n### Requirements\r\nIn order to use the out of the box deployment, you need to have the following libraries pre-iinstalled\r\n* Python 2.7 (other versions should work with some modifications)\r\n* fabric\r\n* Jinja2\r\n\r\nOther miscellaneous libraries used but not required (see requirements.txt for full listing).  \r\n* Django 1.6\r\n* Twilio API\r\n* Sunlight Foundation API\r\n* MySQL\r\n* South\r\n* Docutils\r\n* virtualenv\r\n\r\n### Deployment\r\nDeploying to product is very easy. Simply follow the below steps.\r\n\r\n1. Provision a Ubuntu box (tested on 14.04 LTS x64 but should works on other versions) where you would like the app to run in production with ssh access enabled. Recommend using Digital Ocean for a quick option here.\r\n\r\n2. Edit fabfile.py and set the env.hosts to root@IP_ADDRESS_OF_THE_UBUNTU_BOX.  \r\nYou can optionally customize the other variable and paths below env.hosts, but this should not be required if you are using the default Ubuntu settings.\r\n\r\n3. On your shell, run the following:\r\n```\r\n$ fab install\r\n```\r\n\r\nFollow the instructions and prompts.  It's recommended that you setup the database when prompted on the initial deployment as well.\r\n\r\n4.\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}